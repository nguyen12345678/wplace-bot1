// ==============================
// WPLACE BOT V·∫º T·ª∞ ƒê·ªòNG
// ==============================

// C·∫•u h√¨nh bot
const wplaceBot = {
    isRunning: false,
    delay: 30000, // th·ªùi gian gi·ªØa 2 l·∫ßn click (ms) = 30 gi√¢y
    pixels: [],   // m·∫£ng pixel ·∫£nh (s·∫Ω load sau)
    currentIndex: 0,
    startX: 100, // v·ªã tr√≠ X tr√™n canvas
    startY: 100, // v·ªã tr√≠ Y tr√™n canvas
    interval: null,

    // Kh·ªüi ƒë·ªông bot
    start: function () {
        if (this.isRunning) return console.log("‚ö†Ô∏è Bot ƒë√£ ch·∫°y r·ªìi!");
        this.isRunning = true;
        this.currentIndex = 0;
        this.interval = setInterval(() => this.drawNextPixel(), this.delay);
        console.log("‚úÖ Bot ƒë√£ b·∫Øt ƒë·∫ßu!");
    },

    // D·ª´ng bot
    stop: function () {
        if (!this.isRunning) return console.log("‚ö†Ô∏è Bot ch∆∞a ch·∫°y!");
        clearInterval(this.interval);
        this.isRunning = false;
        console.log("‚èπÔ∏è Bot ƒë√£ d·ª´ng!");
    },

    // ƒê·∫∑t t·ªça ƒë·ªô g·ªëc (x, y)
    setStartPosition: function (x, y) {
        this.startX = x;
        this.startY = y;
        console.log(`üìç ƒê·∫∑t v·ªã tr√≠ g·ªëc t·∫°i (${x}, ${y})`);
    },

    // ƒê·∫∑t t·ªëc ƒë·ªô delay (ms)
    setDelay: function (ms) {
        this.delay = ms;
        if (this.isRunning) {
            clearInterval(this.interval);
            this.interval = setInterval(() => this.drawNextPixel(), this.delay);
        }
        console.log(`‚ö° T·ªëc ƒë·ªô ƒë·∫∑t th√†nh ${ms}ms m·ªói √¥`);
    },

    // Load ·∫£nh th·ªß c√¥ng t·ª´ data pixel
    loadImageFromData: function (data, name = "·∫¢nh custom") {
        this.pixels = data;
        console.log(`üñºÔ∏è ƒê√£ load ·∫£nh: ${name}, t·ªïng ${data.length} pixel`);
    },

    // Load ·∫£nh t·ª´ URL (PNG/JPG base64)
    async loadImageFromUrl(url, width, height) {
        const img = new Image();
        img.crossOrigin = "Anonymous";
        img.src = url;

        await new Promise(res => img.onload = res);

        const canvas = document.createElement("canvas");
        canvas.width = width;
        canvas.height = height;
        const ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0, width, height);

        const imgData = ctx.getImageData(0, 0, width, height).data;
        let pixels = [];

        for (let y = 0; y < height; y++) {
            for (let x = 0; x < width; x++) {
                const idx = (y * width + x) * 4;
                const r = imgData[idx];
                const g = imgData[idx + 1];
                const b = imgData[idx + 2];
                const a = imgData[idx + 3];
                if (a > 128) { // b·ªè pixel trong su·ªët
                    pixels.push({
                        x: this.startX + x,
                        y: this.startY + y,
                        color: `rgb(${r},${g},${b})`
                    });
                }
            }
        }

        this.loadImageFromData(pixels, url);
    },

    // V·∫Ω pixel ti·∫øp theo
    drawNextPixel: function () {
        if (!this.isRunning || this.currentIndex >= this.pixels.length) {
            this.stop();
            console.log("‚úÖ Ho√†n th√†nh v·∫Ω ·∫£nh!");
            return;
        }
        const p = this.pixels[this.currentIndex];
        this.currentIndex++;

        // Gi·∫£ l·∫≠p click tr√™n canvas
        const canvas = document.querySelector("canvas");
        if (!canvas) return console.error("‚ùå Kh√¥ng t√¨m th·∫•y canvas!");

        const ctx = canvas.getContext("2d");
        ctx.fillStyle = p.color;
        ctx.fillRect(p.x, p.y, 1, 1);

        console.log(`üé® V·∫Ω pixel ${this.currentIndex}/${this.pixels.length} t·∫°i (${p.x},${p.y}) m√†u ${p.color}`);
    }
};
